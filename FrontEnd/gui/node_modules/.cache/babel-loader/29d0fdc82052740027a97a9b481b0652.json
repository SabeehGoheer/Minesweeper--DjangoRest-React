{"ast":null,"code":"import _classCallCheck from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/src/components/boardmap.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Row from \"./row\";\n\nvar BoardMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BoardMap, _React$Component);\n\n  function BoardMap(props) {\n    var _this;\n\n    _classCallCheck(this, BoardMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BoardMap).call(this, props));\n\n    _this.openCell = function (cell) {\n      if (_this.props.gameStatus === \"running\") {\n        _this.handleServerRequests(\"put\", cell.id, \"is_revealed\");\n      }\n    };\n\n    _this.flagCell = function (cell) {\n      if (_this.props.gameStatus === \"running\") {\n        _this.handleServerRequests(\"put\", cell.id, \"is_flagged\");\n      }\n    };\n\n    _this.state = {\n      rows: [],\n      cells: []\n    };\n    return _this;\n  }\n\n  _createClass(BoardMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props.gameStatus);\n      this.handleServerRequests(\"get\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.gameStatus === \"waiting\") this.handleServerRequests(\"delete\");\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      this.handleServerRequests(\"post\");\n    }\n  }, {\n    key: \"makeRows\",\n    value: function makeRows(cellsData) {\n      var board = [];\n\n      for (var row = 0; row < this.props.gridSize; row++) {\n        board.push([]);\n\n        for (var col = 0; col < this.props.gridSize; col++) {\n          board[row].push(cellsData[row * this.props.gridSize + col]);\n        }\n      }\n\n      this.setState({\n        rows: board\n      });\n      if (this.props.gameStatus === \"waiting\") this.props.startGame();\n    }\n  }, {\n    key: \"cellOpenedActions\",\n    value: function cellOpenedActions(data) {\n      if (data.gameStatus === \"finished\") {\n        alert(\"Game Over\");\n        this.setState({\n          cells: data.boardMap\n        });\n        this.makeRows(data.boardMap);\n        this.props.gameOver();\n      }\n\n      this.setState({\n        cells: data.boardMap\n      });\n      this.makeRows(data.boardMap);\n    }\n  }, {\n    key: \"handleServerRequests\",\n    value: function handleServerRequests(requestType, cellId, flag) {\n      var _this2 = this;\n\n      switch (requestType) {\n        case \"post\":\n          return axios.post(\"http://localhost:8000/api/\", {\n            gridSize: this.props.gridSize,\n            numberOfBombs: this.props.numberOfBombs\n          }).then(function (res) {\n            _this2.setState({\n              cells: res.data\n            });\n\n            _this2.makeRows(res.data);\n          }).catch(function (err) {\n            console.log(err);\n          });\n\n        case \"get\":\n          return axios.get(\"http://localhost:8000/api/\").then(function (res) {\n            if (res.data == \"\") _this2.startGame();else {\n              _this2.setState({\n                cells: res.data\n              });\n\n              _this2.makeRows(res.data);\n            }\n          });\n\n        case \"put\":\n          axios.put(\"http://localhost:8000/api/\" + cellId + \"/\", {\n            flag: flag,\n            gridSize: this.props.gridSize\n          }).then(function (res) {\n            _this2.cellOpenedActions(res.data);\n          }).catch(function (err) {\n            console.log(err);\n          });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var rows = this.state.rows.map(function (row, index) {\n        return React.createElement(Row, {\n          cells: row,\n          key: index,\n          openCell: _this3.openCell,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, rows);\n    }\n  }]);\n\n  return BoardMap;\n}(React.Component);\n\nexport default BoardMap;","map":{"version":3,"sources":["/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/src/components/boardmap.js"],"names":["React","axios","Row","BoardMap","props","openCell","cell","gameStatus","handleServerRequests","id","flagCell","state","rows","cells","console","log","cellsData","board","row","gridSize","push","col","setState","startGame","data","alert","boardMap","makeRows","gameOver","requestType","cellId","flag","post","numberOfBombs","then","res","catch","err","get","put","cellOpenedActions","map","index","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Row from \"./row\";\nclass BoardMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      cells: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.gameStatus);\n    this.handleServerRequests(\"get\");\n  }\n\n  componentDidUpdate() {\n    if (this.props.gameStatus === \"waiting\")\n      this.handleServerRequests(\"delete\");\n  }\n\n  startGame() {\n    this.handleServerRequests(\"post\");\n  }\n\n  makeRows(cellsData) {\n    let board = [];\n\n    for (let row = 0; row < this.props.gridSize; row++) {\n      board.push([]);\n      for (let col = 0; col < this.props.gridSize; col++) {\n        board[row].push(cellsData[row * this.props.gridSize + col]);\n      }\n    }\n\n    this.setState({\n      rows: board\n    });\n    if (this.props.gameStatus === \"waiting\") this.props.startGame();\n  }\n\n  openCell = cell => {\n    if (this.props.gameStatus === \"running\") {\n      this.handleServerRequests(\"put\", cell.id, \"is_revealed\");\n    }\n  };\n\n  flagCell = cell => {\n    if (this.props.gameStatus === \"running\") {\n      this.handleServerRequests(\"put\", cell.id, \"is_flagged\");\n    }\n  };\n\n  cellOpenedActions(data) {\n    if (data.gameStatus === \"finished\") {\n      alert(\"Game Over\");\n      this.setState({\n        cells: data.boardMap\n      });\n      this.makeRows(data.boardMap);\n      this.props.gameOver();\n    }\n    this.setState({\n      cells: data.boardMap\n    });\n    this.makeRows(data.boardMap);\n  }\n\n  handleServerRequests(requestType, cellId, flag) {\n    switch (requestType) {\n      case \"post\":\n        return axios\n          .post(\"http://localhost:8000/api/\", {\n            gridSize: this.props.gridSize,\n            numberOfBombs: this.props.numberOfBombs\n          })\n          .then(res => {\n            this.setState({\n              cells: res.data\n            });\n            this.makeRows(res.data);\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      case \"get\":\n        return axios.get(\"http://localhost:8000/api/\").then(res => {\n          if (res.data == \"\") this.startGame();\n          else {\n            this.setState({\n              cells: res.data\n            });\n            this.makeRows(res.data);\n          }\n        });\n      case \"put\":\n        axios\n          .put(\"http://localhost:8000/api/\" + cellId + \"/\", {\n            flag: flag,\n            gridSize: this.props.gridSize\n          })\n          .then(res => {\n            this.cellOpenedActions(res.data);\n          })\n          .catch(err => {\n            console.log(err);\n          });\n    }\n  }\n\n  render() {\n    let rows = this.state.rows.map((row, index) => {\n      return <Row cells={row} key={index} openCell={this.openCell} />;\n    });\n    return <div className=\"board\">{rows}</div>;\n  }\n}\n\nexport default BoardMap;\n"]},"metadata":{},"sourceType":"module"}