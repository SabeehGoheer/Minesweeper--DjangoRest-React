{"ast":null,"code":"import _classCallCheck from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/src/components/boardmap.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Row from \"./row\";\n\nvar BoardMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BoardMap, _React$Component);\n\n  function BoardMap(props) {\n    var _this;\n\n    _classCallCheck(this, BoardMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BoardMap).call(this, props));\n\n    _this.openCell = function (cell) {};\n\n    _this.state = {\n      rows: [],\n      cells: []\n    };\n    return _this;\n  }\n\n  _createClass(BoardMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleServerRequest(\"get\");\n    }\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      this.handleServerRequest(\"post\");\n    }\n  }, {\n    key: \"makeRows\",\n    value: function makeRows(cellsData) {\n      var board = [];\n\n      for (var row = 0; row < this.props.gridSize; row++) {\n        board.push([]);\n\n        for (var col = 0; col < this.props.gridSize; col++) {\n          board[row].push(cellsData[row * this.props.gridSize + col]);\n        }\n      }\n\n      this.setState({\n        rows: board\n      });\n    }\n  }, {\n    key: \"handleServerRequest\",\n    value: function handleServerRequest(requestType) {\n      var _this2 = this;\n\n      switch (requestType) {\n        case \"post\":\n          return axios.post(\"http://localhost:8000/api/\", {\n            gridSize: this.props.gridSize,\n            numberOfBombs: this.props.numberOfBombs\n          }).then(function (res) {\n            _this2.setState({\n              cells: res.data\n            });\n\n            _this2.makeRows(res.data);\n          }).catch(function (err) {\n            console.err(err);\n          });\n\n        case \"get\":\n          return axios.get(\"http://localhost:8000/api/\").then(function (res) {\n            if (res.data == \"\") _this2.startGame();else {\n              _this2.setState({\n                cells: res.data\n              });\n\n              _this2.makeRows(res.data);\n            }\n          });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rows = this.state.rows.map(function (row, index) {\n        return React.createElement(Row, {\n          cells: row,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, rows);\n    }\n  }]);\n\n  return BoardMap;\n}(React.Component);\n\nexport default BoardMap;","map":{"version":3,"sources":["/Users/sabeehgoheer/Development/Django Apps/Minesweeper/FrontEnd/gui/src/components/boardmap.js"],"names":["React","axios","Row","BoardMap","props","openCell","cell","state","rows","cells","handleServerRequest","cellsData","board","row","gridSize","push","col","setState","requestType","post","numberOfBombs","then","res","data","makeRows","catch","err","console","get","startGame","map","index","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;IACMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,UA+BnBC,QA/BmB,GA+BR,UAAAC,IAAI,EAAI,CAAE,CA/BF;;AAEjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAFiB;AAMlB;;;;wCAEmB;AAClB,WAAKC,mBAAL,CAAyB,KAAzB;AACD;;;gCAEW;AACV,WAAKA,mBAAL,CAAyB,MAAzB;AACD;;;6BAEQC,S,EAAW;AAClB,UAAIC,KAAK,GAAG,EAAZ;;AAEA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKT,KAAL,CAAWU,QAAnC,EAA6CD,GAAG,EAAhD,EAAoD;AAClDD,QAAAA,KAAK,CAACG,IAAN,CAAW,EAAX;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKZ,KAAL,CAAWU,QAAnC,EAA6CE,GAAG,EAAhD,EAAoD;AAClDJ,UAAAA,KAAK,CAACC,GAAD,CAAL,CAAWE,IAAX,CAAgBJ,SAAS,CAACE,GAAG,GAAG,KAAKT,KAAL,CAAWU,QAAjB,GAA4BE,GAA7B,CAAzB;AACD;AACF;;AAED,WAAKC,QAAL,CAAc;AACZT,QAAAA,IAAI,EAAEI;AADM,OAAd;AAGD;;;wCAImBM,W,EAAa;AAAA;;AAC/B,cAAQA,WAAR;AACE,aAAK,MAAL;AACE,iBAAOjB,KAAK,CACTkB,IADI,CACC,4BADD,EAC+B;AAClCL,YAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWU,QADa;AAElCM,YAAAA,aAAa,EAAE,KAAKhB,KAAL,CAAWgB;AAFQ,WAD/B,EAKJC,IALI,CAKC,UAAAC,GAAG,EAAI;AACX,YAAA,MAAI,CAACL,QAAL,CAAc;AACZR,cAAAA,KAAK,EAAEa,GAAG,CAACC;AADC,aAAd;;AAGA,YAAA,MAAI,CAACC,QAAL,CAAcF,GAAG,CAACC,IAAlB;AACD,WAVI,EAWJE,KAXI,CAWE,UAAAC,GAAG,EAAI;AACZC,YAAAA,OAAO,CAACD,GAAR,CAAYA,GAAZ;AACD,WAbI,CAAP;;AAcF,aAAK,KAAL;AACE,iBAAOzB,KAAK,CAAC2B,GAAN,CAAU,4BAAV,EAAwCP,IAAxC,CAA6C,UAAAC,GAAG,EAAI;AACzD,gBAAIA,GAAG,CAACC,IAAJ,IAAY,EAAhB,EAAoB,MAAI,CAACM,SAAL,GAApB,KACK;AACH,cAAA,MAAI,CAACZ,QAAL,CAAc;AACZR,gBAAAA,KAAK,EAAEa,GAAG,CAACC;AADC,eAAd;;AAGA,cAAA,MAAI,CAACC,QAAL,CAAcF,GAAG,CAACC,IAAlB;AACD;AACF,WARM,CAAP;AAjBJ;AA2BD;;;6BAEQ;AACP,UAAIf,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBsB,GAAhB,CAAoB,UAACjB,GAAD,EAAMkB,KAAN,EAAgB;AAC7C,eAAO,oBAAC,GAAD;AAAK,UAAA,KAAK,EAAElB,GAAZ;AAAiB,UAAA,GAAG,EAAEkB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFU,CAAX;AAGA,aAAO;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBvB,IAAxB,CAAP;AACD;;;;EArEoBR,KAAK,CAACgC,S;;AAwE7B,eAAe7B,QAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Row from \"./row\";\nclass BoardMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      cells: []\n    };\n  }\n\n  componentDidMount() {\n    this.handleServerRequest(\"get\");\n  }\n\n  startGame() {\n    this.handleServerRequest(\"post\");\n  }\n\n  makeRows(cellsData) {\n    let board = [];\n\n    for (let row = 0; row < this.props.gridSize; row++) {\n      board.push([]);\n      for (let col = 0; col < this.props.gridSize; col++) {\n        board[row].push(cellsData[row * this.props.gridSize + col]);\n      }\n    }\n\n    this.setState({\n      rows: board\n    });\n  }\n\n  openCell = cell => {};\n\n  handleServerRequest(requestType) {\n    switch (requestType) {\n      case \"post\":\n        return axios\n          .post(\"http://localhost:8000/api/\", {\n            gridSize: this.props.gridSize,\n            numberOfBombs: this.props.numberOfBombs\n          })\n          .then(res => {\n            this.setState({\n              cells: res.data\n            });\n            this.makeRows(res.data);\n          })\n          .catch(err => {\n            console.err(err);\n          });\n      case \"get\":\n        return axios.get(\"http://localhost:8000/api/\").then(res => {\n          if (res.data == \"\") this.startGame();\n          else {\n            this.setState({\n              cells: res.data\n            });\n            this.makeRows(res.data);\n          }\n        });\n    }\n  }\n\n  render() {\n    let rows = this.state.rows.map((row, index) => {\n      return <Row cells={row} key={index} />;\n    });\n    return <div className=\"board\">{rows}</div>;\n  }\n}\n\nexport default BoardMap;\n"]},"metadata":{},"sourceType":"module"}